from django.db import models
from django.core.cache import cache
from django.utils.functional import cached_property


class Product(models.Model):
    title = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200, db_index=True)
    price = models.DecimalField('–¶–µ–Ω–∞', max_digits=10, decimal_places=0)
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ')
    image = models.ImageField('–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', upload_to='products/', blank=True, null=True)
    updated_at = models.DateTimeField('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', auto_now=True)

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã'
        indexes = [
            models.Index(fields=['title']),
        ]

    def __str__(self):
        return self.title

    @cached_property
    def formatted_price(self):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
        return f"{self.price:,} ‚ÇΩ".replace(',', ' ')

    def save(self, *args, **kwargs):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        super().save(*args, **kwargs)
        # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–µ—à–µ–π
        cache.delete_many([
            'products_all',
            'products_featured',
            'products_catalog',
            f'product_{self.pk}',
            f'product_detail_{self.pk}',
        ])


class ProductPrice(models.Model):
    product = models.ForeignKey(
        Product,
        on_delete=models.CASCADE,
        related_name='prices',
        verbose_name='–¢–æ–≤–∞—Ä'
    )
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞/—É—Å–ª—É–≥–∏', max_length=200)
    price = models.DecimalField('–¶–µ–Ω–∞', max_digits=10, decimal_places=0)
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞', blank=True)
    order = models.PositiveIntegerField('–ü–æ—Ä—è–¥–æ–∫', default=0, db_index=True)

    class Meta:
        verbose_name = '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞'
        verbose_name_plural = '–¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞'
        ordering = ['order', 'price']
        indexes = [
            models.Index(fields=['product', 'order']),
        ]

    def __str__(self):
        return f"{self.product.title} - {self.name} - {self.price} ‚ÇΩ"

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
        cache.delete_many([
            f'product_detail_{self.product.pk}',
        ])


class ProductImage(models.Model):
    product = models.ForeignKey(
        Product,
        on_delete=models.CASCADE,
        related_name='images',
        verbose_name='–¢–æ–≤–∞—Ä'
    )
    image = models.ImageField('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', upload_to='product_images/')
    order = models.PositiveIntegerField('–ü–æ—Ä—è–¥–æ–∫', default=0, db_index=True)

    class Meta:
        verbose_name = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
        verbose_name_plural = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'
        ordering = ['order']
        indexes = [
            models.Index(fields=['product', 'order']),
        ]

    def __str__(self):
        return f"–§–æ—Ç–æ –¥–ª—è {self.product.title}"

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cache.delete_many([
            f'product_detail_{self.product.pk}',
        ])


class GlobalOption(models.Model):
    CATEGORY_CHOICES = [
        ('exterior', 'üèóÔ∏è –í–Ω–µ—à–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'),
        ('electrical', '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞'),
        ('doors_windows', 'üö™ –î–≤–µ—Ä–∏ –∏ –æ–∫–Ω–∞'),
        ('lighting', 'üí° –û—Å–≤–µ—â–µ–Ω–∏–µ'),
        ('interior', 'üé® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞'),
        ('steam_furniture', 'üî• –ú–µ–±–µ–ª—å –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–Ω–æ–π'),
        ('lounge_furniture', 'üõãÔ∏è –ú–µ–±–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –æ—Ç–¥—ã—Ö–∞'),
        ('heating', 'üå°Ô∏è –û—Ç–æ–ø–ª–µ–Ω–∏–µ'),
        ('washing', 'üöø –ü–æ–º—ã–≤–æ—á–Ω–∞—è'),
        ('additional', '‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'),
    ]

    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200)
    price = models.DecimalField('–¶–µ–Ω–∞', max_digits=10, decimal_places=0)
    category = models.CharField(
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        max_length=50,
        choices=CATEGORY_CHOICES,
        default='additional',
        db_index=True
    )
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ', blank=True)
    image = models.ImageField('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', upload_to='global_options/', blank=True, null=True)
    is_active = models.BooleanField('–ê–∫—Ç–∏–≤–Ω–æ', default=True, db_index=True)
    order = models.PositiveIntegerField('–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏', default=0, db_index=True)

    class Meta:
        verbose_name = '–ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞'
        verbose_name_plural = '–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏'
        ordering = ['category', 'order', 'name']
        indexes = [
            models.Index(fields=['is_active', 'category', 'order']),
        ]

    def __str__(self):
        return f"{self.get_category_display()} - {self.name}"

    @cached_property
    def formatted_price(self):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
        return f"{self.price:,} ‚ÇΩ".replace(',', ' ')

    def save(self, *args, **kwargs):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        super().save(*args, **kwargs)
        cache.delete('global_options_active')
        cache.delete('global_options_grouped')


class WorkPhoto(models.Model):
    image = models.ImageField('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', upload_to='works/')
    created_at = models.DateTimeField('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True, db_index=True)

    class Meta:
        verbose_name = '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ä–∞–±–æ—Ç—ã'
        verbose_name_plural = '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞–±–æ—Ç'
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['-created_at']),
        ]

    def __str__(self):
        return f"–§–æ—Ç–æ –æ—Ç {self.created_at.strftime('%d.%m.%Y %H:%M')}"


class OrderRequest(models.Model):
    fio = models.CharField('–§–ò–û', max_length=200, db_index=True)
    phone = models.CharField('–¢–µ–ª–µ—Ñ–æ–Ω', max_length=20, db_index=True)
    email = models.EmailField('Email', db_index=True)
    message = models.TextField('–°–æ–æ–±—â–µ–Ω–∏–µ', blank=True)
    order_details = models.TextField('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞', blank=True)
    created_at = models.DateTimeField('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True, db_index=True)

    class Meta:
        verbose_name = '–ó–∞—è–≤–∫–∞'
        verbose_name_plural = '–ó–∞—è–≤–∫–∏'
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['-created_at']),
            models.Index(fields=['phone', 'email']),
        ]

    def __str__(self):
        return f"–ó–∞—è–≤–∫–∞ –æ—Ç {self.fio} - {self.created_at.strftime('%d.%m.%Y %H:%M')}"


class CompanyInfo(models.Model):
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏')
    phone = models.CharField('–¢–µ–ª–µ—Ñ–æ–Ω', max_length=20, blank=True)
    email = models.EmailField('Email', blank=True)
    address = models.CharField('–ê–¥—Ä–µ—Å', max_length=300, blank=True)

    class Meta:
        verbose_name = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏'
        verbose_name_plural = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏'

    def __str__(self):
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"

    def save(self, *args, **kwargs):
        if not self.pk and CompanyInfo.objects.exists():
            raise ValueError('–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏')
        super().save(*args, **kwargs)
        cache.delete('company_info')

    @classmethod
    def get_cached(cls):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –∫–µ—à–∞"""
        info = cache.get('company_info')
        if info is None:
            info = cls.objects.first()
            if info:
                cache.set('company_info', info, 60 * 60 * 24)  # 24 —á–∞—Å–∞
        return info